// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本: 15.0.0.0
//  
//     对此文件的更改可能导致不正确的行为，如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Migration.Core.Template.Java
{
    using System.Linq;
    using System.Text;
    using Migration.Model;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class JavaTemplate : JavaTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 7 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

    if(this.Root != null)
    {
        switch (this.Root.NodeType)
        {
            case Migration.Model.NodeType.Class:
                {
                    var classNode = this.Root as ClassNode;
                    if(classNode != null)
                    {

            
            #line default
            #line hidden
            
            #line 18 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        if(!string.IsNullOrEmpty(classNode.Summary))
                        {

            
            #line default
            #line hidden
            this.Write("\r\n/**\r\n * @Description: ");
            
            #line 24 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classNode.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n*/\r\n");
            
            #line 26 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        }

            
            #line default
            #line hidden
            
            #line 29 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 29 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classNode.Name));
            
            #line default
            #line hidden
            
            #line 29 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(classNode.BaseTypeName)?string.Empty : string.Concat(" extends ", classNode.BaseTypeName)));
            
            #line default
            #line hidden
            this.Write(" {\r\n\r\n");
            
            #line 31 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        if(classNode.Items != null && classNode.Items.Count > 0)
                        {
                            var propertyNodes = classNode.Items.Where(v => v.NodeType == NodeType.Property && v.IsChecked).ToList();
                            if(propertyNodes.Count > 0)
                            {

            
            #line default
            #line hidden
            
            #line 38 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("// region Properties\r\n\r\n");
            
            #line 40 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                                foreach(var propertyNode in propertyNodes)
                                {
                                    var javaTemplate = new JavaTemplate();
                                    javaTemplate.Root = propertyNode;
                                    javaTemplate.Indent = 1;
                                    var content = javaTemplate.TransformText();

            
            #line default
            #line hidden
            
            #line 47 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content));
            
            #line default
            #line hidden
            
            #line 47 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                                }

            
            #line default
            #line hidden
            
            #line 50 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("// endregion\r\n\r\n");
            
            #line 52 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                            }

                            var fieldNodes = classNode.Items.Where(v => v.NodeType == NodeType.Field && v.IsChecked).ToList();
                            if(fieldNodes.Count > 0)
                            {

            
            #line default
            #line hidden
            
            #line 59 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("// region Fields\r\n");
            
            #line 60 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                                foreach(var fieldNode in fieldNodes)
                                {
                                    var javaTemplate = new JavaTemplate();
                                    javaTemplate.Root = fieldNode;
                                    javaTemplate.Indent = 1;
                                    var content = javaTemplate.TransformText();

            
            #line default
            #line hidden
            
            #line 67 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content));
            
            #line default
            #line hidden
            
            #line 67 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                                }


            
            #line default
            #line hidden
            
            #line 71 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("// endregion\r\n\r\n");
            
            #line 73 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                            }

                            var methodNodes = classNode.Items.Where(v => v.NodeType == NodeType.Method && v.IsChecked).ToList();
                            if(methodNodes.Count > 0)
                            {

            
            #line default
            #line hidden
            
            #line 80 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("// region Methods\r\n");
            
            #line 81 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                                foreach(var methodNode in methodNodes)
                                {
                                    var javaTemplate = new JavaTemplate();
                                    javaTemplate.Root = methodNode;
                                    javaTemplate.Indent = 1;
                                    var content = javaTemplate.TransformText();

            
            #line default
            #line hidden
            
            #line 88 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content));
            
            #line default
            #line hidden
            
            #line 88 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                                }

            
            #line default
            #line hidden
            
            #line 91 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("// endregion\r\n\r\n");
            
            #line 93 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                            }
                        }

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 98 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                    }
                }

                break;
            case Migration.Model.NodeType.Enum:

            
            #line default
            #line hidden
            this.Write("enum ");
            
            #line 104 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Root.Name));
            
            #line default
            #line hidden
            
            #line 104 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                break;
            case Migration.Model.NodeType.Property:
                {
                    var propertyNode = this.Root as PropertyNode;
                    if(propertyNode != null)
                    {

            
            #line default
            #line hidden
            
            #line 112 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("private ");
            
            #line 112 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyNode.JavaTypeName??string.Empty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 112 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyNode.PropertyJavaName));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 112 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(propertyNode.Summary) ? string.Empty : string.Concat("// ", propertyNode.Summary)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 114 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        if(propertyNode != null && propertyNode.Items.Count >0)
                        {
                            var items = this.Root.Items.Where(v => v.IsChecked).ToList();
                            foreach(var item in items)
                            {
                                var javaTemplate = new JavaTemplate();
                                javaTemplate.Root = item;
                                javaTemplate.Indent = this.Indent;
                                var content = javaTemplate.TransformText();

            
            #line default
            #line hidden
            
            #line 124 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content));
            
            #line default
            #line hidden
            
            #line 124 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                            }
                        }
                    }
                }

                break;
            case Migration.Model.NodeType.Field:
                {
                    var fieldNode = this.Root as FieldNode;
                    if(fieldNode != null)
                    {

            
            #line default
            #line hidden
            
            #line 137 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            
            #line 137 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldNode.JavaTypeName));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 137 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fieldNode.Name));
            
            #line default
            #line hidden
            
            #line 137 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(fieldNode.ConstValue) ? string.Empty : string.Concat(" = ", fieldNode.ConstValue)));
            
            #line default
            #line hidden
            this.Write(";");
            
            #line 137 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.IsNullOrEmpty(fieldNode.Summary) ? string.Empty : string.Concat("// ", fieldNode.Summary)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 138 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                    }
                }

                break;
            case Migration.Model.NodeType.Method:
                {
                    var methodNode = this.Root as MethodNode;
                    if(methodNode != null)
                    {
                        if(methodNode.IsGet)
                        {

            
            #line default
            #line hidden
            
            #line 151 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 151 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.ReturnJavaTypeName??string.Empty));
            
            #line default
            #line hidden
            this.Write(" get");
            
            #line 151 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.PropertyName));
            
            #line default
            #line hidden
            this.Write("() {\r\n");
            
            #line 152 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            this.Write("return ");
            
            #line 152 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.PropertyJavaName));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 153 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 155 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        }
                        else if(methodNode.IsSet)
                        {

            
            #line default
            #line hidden
            
            #line 160 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("public void set");
            
            #line 160 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.PropertyName));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 160 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((methodNode.Parameters != null && methodNode.Parameters.Count > 0)?string.Join(", ", methodNode.Parameters.Select(v => string.Format("{0} {1}", v.JavaTypeName, v.Name))):string.Empty));
            
            #line default
            #line hidden
            this.Write("){\r\n");
            
            #line 161 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent + 1)));
            
            #line default
            #line hidden
            
            #line 161 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.PropertyJavaName));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n");
            
            #line 162 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 164 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        }
                        else
                        {
                            if(!string.IsNullOrEmpty(methodNode.Summary))
                            {

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 172 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("/**\r\n");
            
            #line 173 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write(" * ");
            
            #line 173 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.Summary));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 174 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("*/\r\n");
            
            #line 175 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                            }

            
            #line default
            #line hidden
            
            #line 178 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(TemplateUtility.GetIndent(this.Indent)));
            
            #line default
            #line hidden
            this.Write("public ");
            
            #line 178 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.IsStatic?"static ":string.Empty));
            
            #line default
            #line hidden
            
            #line 178 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.ReturnJavaTypeName??string.Empty));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 178 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodNode.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 178 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((methodNode.Parameters != null && methodNode.Parameters.Count > 0)?string.Join(", ", methodNode.Parameters.Select(v => string.Format("{0} {1}", v.JavaTypeName, v.Name))):string.Empty));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n");
            
            #line 180 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        }
                    }
                }

                break;
            case Migration.Model.NodeType.Namespace:
                {

            
            #line default
            #line hidden
            this.Write("package ");
            
            #line 189 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Root.Name??string.Empty));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 190 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                    if(this.Root.Items != null && this.Root.Items.Count > 0)
                    {
                        var items = this.Root.Items.Where(v => v.IsChecked).ToList();
                        foreach(var item in items)
                        {
                            var javaTemplate = new JavaTemplate();
                            javaTemplate.Root = item;
                            var content = javaTemplate.TransformText();

            
            #line default
            #line hidden
            
            #line 199 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content));
            
            #line default
            #line hidden
            
            #line 199 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        }
                    }
                }

                break;
            case Migration.Model.NodeType.Root:
                {
                    if(this.Root.Items != null && this.Root.Items.Count > 0)
                    {
                        var items = this.Root.Items.Where(v => v.IsChecked).ToList();
                        foreach(var item in items)
                        {
                            var javaTemplate = new JavaTemplate();
                            javaTemplate.Root = item;
                            var content = javaTemplate.TransformText();

            
            #line default
            #line hidden
            
            #line 215 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(content));
            
            #line default
            #line hidden
            
            #line 215 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                        }
                    }
                }

                break;
            case Migration.Model.NodeType.None:
            default:

            
            #line default
            #line hidden
            this.Write("notsupport ");
            
            #line 223 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Root.Name));
            
            #line default
            #line hidden
            
            #line 223 "D:\HarrisGitlab\harriszhang\Migration\Migration\Core\Template\Java\JavaTemplate.tt"

                break;
        }
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class JavaTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
